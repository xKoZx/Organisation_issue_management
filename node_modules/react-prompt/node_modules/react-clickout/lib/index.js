'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var wrapWithClickout = function wrapWithClickout(ToWrap) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var Clickout = function (_React$Component) {
    _inherits(Clickout, _React$Component);

    function Clickout() {
      _classCallCheck(this, Clickout);

      var _this = _possibleConstructorReturn(this, (Clickout.__proto__ || Object.getPrototypeOf(Clickout)).call(this));

      _this.handler = _this.handler.bind(_this);
      return _this;
    }

    _createClass(Clickout, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        document.addEventListener('click', this.handler, true);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        document.removeEventListener('click', this.handler, true);
      }
    }, {
      key: 'handler',
      value: function handler(e) {
        var wrapperNode = this.wrapperNode;
        var wrappedComponent = this.wrappedComponent;

        if ((!wrapperNode || !wrapperNode.contains(e.target)) && typeof wrappedComponent.handleClickout === 'function') {
          var flag = e.target.dataset.reactClickout;
          if (flag === 'exclude') return;

          wrappedComponent.handleClickout(e);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var wrapperStyle = opts.wrapperStyle;

        var wrapperStyles = _defineProperty({
          rc__wrapper: true
        }, wrapperStyle, wrapperStyle);
        return React.createElement(
          'div',
          {
            ref: function ref(r) {
              _this2.wrapperNode = r;
            },
            className: (0, _classnames2.default)(wrapperStyles)
          },
          React.createElement(ToWrap, _extends({}, this.props, {
            ref: function ref(c) {
              _this2.wrappedComponent = c;
            }
          }))
        );
      }
    }]);

    return Clickout;
  }(React.Component);

  return Clickout;
};

exports.default = wrapWithClickout;